<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SKY技术修炼指南</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sky-ng.github.io/"/>
  <updated>2021-06-15T15:10:55.316Z</updated>
  <id>https://sky-ng.github.io/</id>
  
  <author>
    <name>sky-ng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何保证Kafka的可靠性、幂等性和有序性</title>
    <link href="https://sky-ng.github.io/2021/05/09/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81Kafka%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E3%80%81%E5%B9%82%E7%AD%89%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7/"/>
    <id>https://sky-ng.github.io/2021/05/09/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81Kafka%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E3%80%81%E5%B9%82%E7%AD%89%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7/</id>
    <published>2021-05-09T08:31:22.000Z</published>
    <updated>2021-06-15T15:10:55.316Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前的项目中由于用到了Kafka，所以在前一阵的实习面试中被问到了如何保证Kafka消息的有序性，所以本文对于Kafka这三个常被问到的问题进行总结归纳。&lt;/p&gt;
    
    </summary>
    
    
      <category term="消息队列" scheme="https://sky-ng.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="Kafka" scheme="https://sky-ng.github.io/tags/Kafka/"/>
    
      <category term="消息队列" scheme="https://sky-ng.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="中间件" scheme="https://sky-ng.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>图解堆排序</title>
    <link href="https://sky-ng.github.io/2021/02/04/%E5%9B%BE%E8%A7%A3%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>https://sky-ng.github.io/2021/02/04/%E5%9B%BE%E8%A7%A3%E5%A0%86%E6%8E%92%E5%BA%8F/</id>
    <published>2021-02-04T07:28:22.000Z</published>
    <updated>2021-02-04T15:35:47.888Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍一下常见的堆排序的原理及实现代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://sky-ng.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
      <category term="算法" scheme="https://sky-ng.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://sky-ng.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>动态代理了解一下？</title>
    <link href="https://sky-ng.github.io/2021/01/30/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%EF%BC%9F/"/>
    <id>https://sky-ng.github.io/2021/01/30/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%EF%BC%9F/</id>
    <published>2021-01-30T12:00:23.000Z</published>
    <updated>2021-01-31T12:03:41.039Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;介绍动态代理之前，先介绍一下什么是代理模式。当我们不想访问或者不能直接访问一个对象的时候，我们就需要用到代理模式。代理模式一般涉及到委托类与代理类两个概念，代理类用于为委托类处理一些事务，代理类对象常常与委托类对象相关联。代理模式可以分为静态代理和动态代理，静态代理需要为每一个委托类实现一个代理类，程序运行之前代理类的.class文件就已经存在了，而动态代理则是在运行时利用反射机制动态生成的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="https://sky-ng.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Spring" scheme="https://sky-ng.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS的原理是什么</title>
    <link href="https://sky-ng.github.io/2021/01/21/HTTPS%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>https://sky-ng.github.io/2021/01/21/HTTPS%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2021-01-21T13:56:45.000Z</published>
    <updated>2021-01-26T02:25:27.812Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;HTTPS作为HTTP的升级版本，最大的特点就是将原来明文的HTTP变成了更安全的加密版本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://sky-ng.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://sky-ng.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>腾讯面试官：ThreadLocal会产生内存泄露的原因是什么</title>
    <link href="https://sky-ng.github.io/2020/11/08/%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9AThreadLocal%E4%BC%9A%E4%BA%A7%E7%94%9F%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>https://sky-ng.github.io/2020/11/08/%E8%85%BE%E8%AE%AF%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9AThreadLocal%E4%BC%9A%E4%BA%A7%E7%94%9F%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2020-11-08T02:52:31.000Z</published>
    <updated>2020-11-08T12:41:09.236Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;通常情况下，我们在内存中创建的变量是可被多个线程同时访问的，Java通过ThreadLocal实现了线程数据隔离的机制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
      <category term="Java多线程" scheme="https://sky-ng.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>聊聊Java 8的Lambda表达式和函数式接口</title>
    <link href="https://sky-ng.github.io/2020/10/27/%E8%81%8A%E8%81%8AJava-8%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>https://sky-ng.github.io/2020/10/27/%E8%81%8A%E8%81%8AJava-8%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-10-27T11:37:42.000Z</published>
    <updated>2020-10-30T13:57:51.334Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Java 8作为Java的一个里程碑版本，提供了很多特性，本文主要介绍Java 8的Lambda表达式及函数式接口的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>小米面试官：说说Java的反射</title>
    <link href="https://sky-ng.github.io/2020/10/25/%E5%B0%8F%E7%B1%B3%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E8%AF%B4Java%E7%9A%84%E5%8F%8D%E5%B0%84/"/>
    <id>https://sky-ng.github.io/2020/10/25/%E5%B0%8F%E7%B1%B3%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E8%AF%B4Java%E7%9A%84%E5%8F%8D%E5%B0%84/</id>
    <published>2020-10-25T03:36:13.000Z</published>
    <updated>2020-10-25T14:32:56.331Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;反射是框架设计的灵魂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>字节面试官：synchronized能保证可见性吗</title>
    <link href="https://sky-ng.github.io/2020/10/15/%E5%AD%97%E8%8A%82%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9Asynchronized%E8%83%BD%E4%BF%9D%E8%AF%81%E5%8F%AF%E8%A7%81%E6%80%A7%E5%90%97/"/>
    <id>https://sky-ng.github.io/2020/10/15/%E5%AD%97%E8%8A%82%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9Asynchronized%E8%83%BD%E4%BF%9D%E8%AF%81%E5%8F%AF%E8%A7%81%E6%80%A7%E5%90%97/</id>
    <published>2020-10-15T12:59:46.000Z</published>
    <updated>2020-10-21T12:40:13.169Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;synchronized&lt;/code&gt;是Java并发中最常见的关键字之一，使用锁保证线程间同步，下面介绍&lt;code&gt;synchronized&lt;/code&gt;相关内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
      <category term="Java多线程" scheme="https://sky-ng.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>拼多多面试官：说说数据库事务隔离级别</title>
    <link href="https://sky-ng.github.io/2020/10/11/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E8%AF%B4%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>https://sky-ng.github.io/2020/10/11/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E8%AF%B4%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</id>
    <published>2020-10-11T14:23:00.000Z</published>
    <updated>2020-10-17T12:03:36.402Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;什么是数据库事务？数据库事务是一系列数据库操作的集合，数据库事务是数据库管理系统与文件系统的重要区别之一。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://sky-ng.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://sky-ng.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://sky-ng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>滴滴面试官：如何实现一个线程安全的单例模式</title>
    <link href="https://sky-ng.github.io/2020/10/09/%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://sky-ng.github.io/2020/10/09/%E6%BB%B4%E6%BB%B4%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-10-09T14:20:34.000Z</published>
    <updated>2020-10-14T07:06:20.435Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;单例模式作为最常见的设计模式，有很多实现方式，今天介绍一下单例模式相关的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="https://sky-ng.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java多线程" scheme="https://sky-ng.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="设计模式" scheme="https://sky-ng.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>美团面试官：说说Redis的缓存雪崩、缓存穿透和缓存击穿</title>
    <link href="https://sky-ng.github.io/2020/10/07/%E7%BE%8E%E5%9B%A2%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E8%AF%B4Redis%E7%9A%84%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/"/>
    <id>https://sky-ng.github.io/2020/10/07/%E7%BE%8E%E5%9B%A2%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E8%AF%B4Redis%E7%9A%84%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%92%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/</id>
    <published>2020-10-07T06:21:07.000Z</published>
    <updated>2020-10-17T12:03:17.520Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存雪崩&quot;&gt;&lt;a href=&quot;#缓存雪崩&quot; class=&quot;headerlink&quot; title=&quot;缓存雪崩&quot;&gt;&lt;/a&gt;缓存雪崩&lt;/h2&gt;&lt;p&gt;想象这样一个场景，当我们的Redis服务器中的缓存在某一段时间内大量失效或者Redis服务器瘫痪，用户的请求没有了缓存的拦截直接落在了数据库服务器上导致数据库服务器直接瘫痪，这就是我们今天要介绍的缓存雪崩。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://sky-ng.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://sky-ng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Redis" scheme="https://sky-ng.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>美团面试官：说说MySQL的索引</title>
    <link href="https://sky-ng.github.io/2020/10/04/%E7%BE%8E%E5%9B%A2%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E8%AF%B4MySQL%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
    <id>https://sky-ng.github.io/2020/10/04/%E7%BE%8E%E5%9B%A2%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E8%AF%B4MySQL%E7%9A%84%E7%B4%A2%E5%BC%95/</id>
    <published>2020-10-04T03:15:33.000Z</published>
    <updated>2021-02-05T14:01:45.482Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;从本文开始，选取牛客网上大厂的面试题，整理出相关内容的知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://sky-ng.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://sky-ng.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://sky-ng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Java内存模型</title>
    <link href="https://sky-ng.github.io/2020/09/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://sky-ng.github.io/2020/09/13/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-09-13T12:31:58.000Z</published>
    <updated>2020-09-16T08:21:50.416Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍一下Java多线程中比较重要的部分——Java内存模型，也就是我们说的JMM。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
      <category term="Java多线程" scheme="https://sky-ng.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java线程通信</title>
    <link href="https://sky-ng.github.io/2020/09/08/Java%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
    <id>https://sky-ng.github.io/2020/09/08/Java%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</id>
    <published>2020-09-08T13:05:39.000Z</published>
    <updated>2020-09-12T14:51:14.045Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;线程通信是Java线程部分的重点，我们介绍一下常见的几种线程通信方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
      <category term="Java多线程" scheme="https://sky-ng.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>电路交换、报文交换与分组交换</title>
    <link href="https://sky-ng.github.io/2020/08/27/%E7%94%B5%E8%B7%AF%E4%BA%A4%E6%8D%A2%E3%80%81%E6%8A%A5%E6%96%87%E4%BA%A4%E6%8D%A2%E4%B8%8E%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2/"/>
    <id>https://sky-ng.github.io/2020/08/27/%E7%94%B5%E8%B7%AF%E4%BA%A4%E6%8D%A2%E3%80%81%E6%8A%A5%E6%96%87%E4%BA%A4%E6%8D%A2%E4%B8%8E%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2/</id>
    <published>2020-08-27T07:08:15.000Z</published>
    <updated>2020-08-29T07:21:10.238Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在计算机网络中有三种主要的数据交换方式，分别是电路交换、报文交换和分组交换。&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://sky-ng.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="https://sky-ng.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>不会吧不会吧，不会有人连线程池都没听说过吧</title>
    <link href="https://sky-ng.github.io/2020/08/06/%E4%B8%8D%E4%BC%9A%E5%90%A7%E4%B8%8D%E4%BC%9A%E5%90%A7%EF%BC%8C%E4%B8%8D%E4%BC%9A%E6%9C%89%E4%BA%BA%E8%BF%9E%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%83%BD%E6%B2%A1%E5%90%AC%E8%AF%B4%E8%BF%87%E5%90%A7/"/>
    <id>https://sky-ng.github.io/2020/08/06/%E4%B8%8D%E4%BC%9A%E5%90%A7%E4%B8%8D%E4%BC%9A%E5%90%A7%EF%BC%8C%E4%B8%8D%E4%BC%9A%E6%9C%89%E4%BA%BA%E8%BF%9E%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%83%BD%E6%B2%A1%E5%90%AC%E8%AF%B4%E8%BF%87%E5%90%A7/</id>
    <published>2020-08-06T13:34:41.000Z</published>
    <updated>2020-08-09T02:31:33.462Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇文章中，我们介绍了创建线程的三种方法，但实际开发中如果需要频繁创建线程则不会使用前文说的那三种方法，而是选择使用线程池创建线程。使用线程池可以有效减少在手动创建线程过程中产生的开销，方便线程进行统一管理，提高系统资源利用率。&lt;/p&gt;
&lt;p&gt;在阿里巴巴Java开发手册中也强制规定了要使用线程资源必须通过线程池创建，不允许在应用中自行显式创建线程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
      <category term="Java多线程" scheme="https://sky-ng.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>从Java创建线程入门多线程</title>
    <link href="https://sky-ng.github.io/2020/08/03/%E4%BB%8EJava%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://sky-ng.github.io/2020/08/03/%E4%BB%8EJava%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E5%85%A5%E9%97%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-08-03T14:09:57.000Z</published>
    <updated>2020-08-04T12:58:38.808Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文是Java多线程系列的第一篇文章，关于线程的基础知识这里不多介绍，在我之前的文章中就已经介绍过了，不熟悉什么是线程的同学可以先去看一下。&lt;a href=&quot;https://sky-ng.github.io/2020/06/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/&quot;&gt;操作系统-进程与线程&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
      <category term="Java多线程" scheme="https://sky-ng.github.io/tags/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>一道广联达秋招算法题</title>
    <link href="https://sky-ng.github.io/2020/07/22/%E4%B8%80%E9%81%93%E5%B9%BF%E8%81%94%E8%BE%BE%E7%A7%8B%E6%8B%9B%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>https://sky-ng.github.io/2020/07/22/%E4%B8%80%E9%81%93%E5%B9%BF%E8%81%94%E8%BE%BE%E7%A7%8B%E6%8B%9B%E7%AE%97%E6%B3%95%E9%A2%98/</id>
    <published>2020-07-22T10:31:40.000Z</published>
    <updated>2020-08-03T14:14:50.533Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天下午师兄在教研室群里发了一道热乎的广联达算法题，乍一看完全没有思路，于是实验室的小伙伴们饶有兴致地开始讨论起了这道题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="笔试面试" scheme="https://sky-ng.github.io/categories/%E7%AC%94%E8%AF%95%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="算法" scheme="https://sky-ng.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="笔试" scheme="https://sky-ng.github.io/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>类加载器与双亲委派模型</title>
    <link href="https://sky-ng.github.io/2020/07/21/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
    <id>https://sky-ng.github.io/2020/07/21/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-07-21T08:04:10.000Z</published>
    <updated>2020-07-21T14:10:02.270Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前说到类加载机制的相关原理，这次来谈谈类加载器以及双亲委派模型的概念。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
      <category term="JVM" scheme="https://sky-ng.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>类加载机制</title>
    <link href="https://sky-ng.github.io/2020/07/16/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>https://sky-ng.github.io/2020/07/16/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</id>
    <published>2020-07-16T03:19:07.000Z</published>
    <updated>2020-07-20T11:13:19.265Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前我们了解过class文件的存储格式，本文将介绍虚拟机如何加载class文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://sky-ng.github.io/tags/Java/"/>
    
      <category term="JVM" scheme="https://sky-ng.github.io/tags/JVM/"/>
    
  </entry>
  
</feed>
